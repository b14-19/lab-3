
# Python3 program to print reverse of list 

   
# Link list node  

class Node: 

    def __init__(self): 

        self.data=  0

        self.next=None

   
# Function to reverse the linked list  

def printReverse( head_ref, n): 

   

    j = 0

    current = head_ref 

    while (current != None):  

        i = 0

          

        # For each node, print proper number 

        # of spaces before printing it 

        while ( i < 2 * (n - j) ): 

            print(end=" ") 

            i = i + 1

    

        # use of carriage return to move back 

        # and print. 

        print( current.data, end = "\r") 

    

        current = current.next

        j = j + 1

       

 # Function to push a node  

def push( head_ref, new_data): 

   

    new_node = Node()  

    

    new_node.data = new_data 

    new_node.next = (head_ref) 

    (head_ref) = new_node 

    return head_ref; 

    
# Function to print linked list and find its 
#  length  

def printList( head): 

   

    # i for finding length of list 

    i = 0

    temp = head 

    while (temp != None):  

        print( temp.data,end = " ") 

        temp = temp.next

        i = i + 1

       

    return i 

   
# Driver program to test above function 

   
# Start with the empty list  

head = None

  
# list nodes are as 6 5 4 3 2 1 

head = push(head, 1) 

head = push(head, 2) 

head = push(head, 3) 

head = push(head, 4) 

head = push(head, 5) 

head = push(head, 6) 

    

print("Given linked list:") 

  
# printlist print the list and 
# return the size of list 

n = printList(head) 

    
# print reverse list with help 
# of carriage return function 

print("\nReversed Linked list:") 
printReverse(head, n) 

print() 
Output:

Given linked list:
6 5 4 3 2 1
Reversed Linked List:
1 2 3 4 5 6
